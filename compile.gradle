import groovy.util.slurpersupport.GPathResult

apply plugin: "java"
apply plugin: "kotlin"

List<String> repos = new LinkedList<>()

ext.registerRepo = {
    repoUrl ->
        repos.add("$repoUrl")
        repositories {
            maven {
                url "$repoUrl"
            }
        }
}

ext.compileRepoDep = {
    depGroup, depName, depVersion ->
        if ("$depVersion".endsWith("+")) {
            println(
                    String.format
                            (
                                    "We will obtain latest version for:\n\t\t[ %s ]\n\t\t[ %s ]\n\t\t[ %s ]",
                                    "$depGroup", "$depName", "$depVersion"
                            )
            )
            String latestVersion = ""
            for (repo in repos) {
                println(String.format("Contacting [ %s ]", repo))
                String rawXml = ""
                try {
                    String group = depGroup.replace(".", "/")
                    URL url = new URL("$repo/$group/$depName/maven-metadata.xml")
                    InputStream stream = url.openStream()
                    List<String> lines = stream.readLines()
                    StringBuilder builder = new StringBuilder()
                    for (line in lines) {
                        builder.append(line)
                    }
                    rawXml = builder.toString()
                    GPathResult xml = new XmlSlurper().parseText(rawXml)
                    xml.versioning.versions.each {
                        member ->
                            member.children().each {
                                tag ->
                                    String textVersion = "$depVersion"
                                    String query = textVersion.substring(0, textVersion.length() - 2)
                                    if ("${tag.text()}".startsWith(query)) {
                                        latestVersion = "${tag.text()}"
                                    }
                            }
                    }
                } catch (Exception e) {
                    println(String.format("Error contacting [ %s ][ %s ]", repo, e))
                }
            }
            if (latestVersion != null && latestVersion.length() > 0) {
                println(String.format("Latest version obtained [ %s ][ %s ]", depVersion, latestVersion))
                dependencies {
                    compile group: depGroup, name: depName, version: latestVersion
                }
            } else {
                println(String.format("We couldn't obtain the latest version [ %s ]", "$depVersion"))
                dependencies {
                    compile group: depGroup, name: depName, version: depVersion
                }
            }
        } else {
            dependencies {
                compile group: depGroup, name: depName, version: depVersion
            }
        }
        dependencies {
            compile group: depGroup, name: depName, version: depVersion
        }
}