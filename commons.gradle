apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "maven"

buildscript {
    ext.kotlin_version = '1.0.6'
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies.classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    dependencies.classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    compile "junit:junit:4.12"
    testCompile "junit:junit:4.12"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

sourceSets.main.kotlin.srcDirs += 'src/main/java'
sourceSets.main.kotlin.srcDirs += 'src/main/kotlin'
sourceSets.main.kotlin.srcDirs += 'build/generated-src/java'
sourceSets.main.kotlin.srcDirs += 'build/generated-src/kotlin'

ext.setupProject = {
    alpha, beta, versionNumber, secondaryVersion, tertiaryVersion, versionPackage ->

        String buildVariant
        try {
            buildVariant = variant
        } catch (Exception e) {
            buildVariant = "DEV"
        }

        project.version = String.format("%d.%d.%d", versionNumber, secondaryVersion, tertiaryVersion)
        if (alpha > 0) {
            project.version += "_Alpha_$alpha"
        } else if (beta > 0) {
            project.version += "_Beta_$beta"
        }
        if (buildVariant != "RELEASE") {
            project.version += "_${buildVariant}"
        }
        if (buildVariant == "DEV") {
            project.version += "_${System.currentTimeMillis()}"
        }
        jar.archiveName = project.name + "_V" + project.version + ".jar"

        StringBuilder packageStructure = new StringBuilder()
        for (String item : versionPackage.split("\\.")) {
            packageStructure.append(item)
                    .append(File.separator)
        }
        File destination = new File(
                "${System.getProperty("user.dir")}${File.separator}${project.name}${File.separator}build${File.separator}generated-src${File.separator}kotlin${File.separator}${packageStructure.toString()}"
        )
        println("We are about to generate sources [ ${destination.absolutePath} ]")
        if (destination.exists() || destination.mkdirs()) {
            final classFile = new File(
                    "$destination${File.separator}BuildConfig.kt"
            )
            final builder = new StringBuilder("package ${versionPackage}")
                    .append("\n")
                    .append("\n")
                    .append("object BuildConfig {")
                    .append("\n")
                    .append("\n")
                    .append("\tval VERSION = \"$version\"")
                    .append("\n")
                    .append("\tval NAME = \"${project.name}\"")
                    .append("\n")
                    .append("\n")
                    .append("}")
            classFile.write(builder.toString())
            println("We generated file [ ${classFile.absolutePath} ]")
        } else {
            println("Couldn't initialize [ ${destination.absolutePath} ]")
        }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    archiveName = project.name + "_V" + project.version + "_Sources.jar"
}

artifacts {
    archives sourcesJar
}